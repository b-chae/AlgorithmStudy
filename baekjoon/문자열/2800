#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

vector<int> stack;
vector<string> ans;
int par[201];
string s;
int include[201];

void solve(int index, int n)
{
    if (index == s.length())
    {
        if (n > 0)
        {
            string temp = "";
            for (int i = 0; i < s.length(); i++)
            {
                if (include[i])
                    temp += s[i];
            }
            ans.push_back(temp);
        }
        return;
    }

    if (s[index] == '(')
    {
        include[index] = true;
        include[par[index]] = true;
        solve(index + 1, n);
        include[index] = false;
        include[par[index]] = false;
        solve(index + 1, n + 1);
    }
    else if (s[index] != ')')
    {
        include[index] = true;
        solve(index + 1, n);
    }
    else
    {
        include[index] = include[par[index]];
        solve(index + 1, n);
    }
}

int main()
{
    cin >> s;
    fill(par, par + s.length(), -1);

    for (int i = 0; i < s.length(); i++)
    {
        if (s[i] == '(')
        {
            stack.push_back(i);
        }
        else if (s[i] == ')')
        {
            int t = stack.back();
            stack.pop_back();
            par[t] = i;
            par[i] = t;
        }
    }

    solve(0, 0);
    sort(ans.begin(), ans.end());
    ans.erase(unique(ans.begin(), ans.end()), ans.end());

    for (string a : ans)
    {
        cout << a << "\n";
    }
    return 0;
}
