#include <iostream>
#include <vector>

using namespace std;

string target;
string files[100];
int N;
vector<string> ans;
int DP[100][105][105];

bool solve(int n, int i, int j){
    bool res = false;
    if(DP[n][i][j]!=-1) return DP[n][i][j];
    if(i==files[n].length() && j==target.length()) return DP[n][i][j] = true;
    if(i>files[n].length()) return DP[n][i][j] = false;
    if(j>=target.length()) return DP[n][i][j] = false;

    if(target[j] == '*'){
        res = res || solve(n, i, j+1);
        if(i<=files[n].length())
        res = res || solve(n, i+1, j);
        if(i<=files[n].length())
        res = res || solve(n, i+1, j+1);
    }
    else if(i<files[n].length() && target[j] == files[n][i]){
        res = res || solve(n, i+1, j+1);
    }
    return DP[n][i][j] = res;
}

int main(){

    cin >> target >> N;

    for(int i=0; i<N; i++){
        for(int j=0; j<=100; j++){
            for(int k=0; k<=100; k++){
                DP[i][j][k] = -1;
            }
        }
    }

    for(int i=0; i<N; i++){
        cin >> files[i];
        if(solve(i, 0, 0)){
            ans.push_back(files[i]);
        }
    }

    for(string s:ans){
        cout << s << "\n";
    }

    return 0;
}
